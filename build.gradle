plugins {
    id 'java'
    id 'java-library'       // 基础 Java 库支持
    id "eu.kakde.gradle.sonatype-maven-central-publisher" version "1.0.6"
}

group = 'io.github.tcq1007'
version = '1.0.0'

ext {
    COMPONENT_TYPE = "java"
    GROUP = "io.github.tcq1007"
    ARTIFACT_ID = "valid-error-code-processor"
    VERSION = "1.0.0"
    PUBLISHING_TYPE = "USER_MANAGED"
    DESC = "A Java library for validating and processing error codes."
    LICENSE = "Apache-2.0"
    LICENSE_URL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
    GITHUB_REPO = "tcq1007/valid-error-code-processor"
    DEVELOPER_ID = "tcq1007"
    DEVELOPER_NAME = "tcq1007"
    DEVELOPER_ORGANIZATION = "io.github.tcq1007"
    DEVELOPER_ORGANIZATION_URL = "https://github.com/tcq1007"
    DEVELOPER_EMAIL = "1007281088@qq.com"
}

// 适用于所有 Java 编译任务
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {

    // 若使用 auto-service 生成服务配置（可选）
    implementation 'com.google.auto.service:auto-service:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}


sonatypeCentralPublishExtension {
    // Set group ID, artifact ID, version, and other publication details
    groupId.set(GROUP)
    artifactId.set(ARTIFACT_ID)
    version.set(VERSION)
    componentType.set(COMPONENT_TYPE)
    publishingType.set(PUBLISHING_TYPE)

    // Set username and password for Sonatype repository
    username.set(System.getenv("SONATYPE_USERNAME") ?: sonatypeUsername)
    password.set(System.getenv("SONATYPE_PASSWORD") ?: sonatypePassword)

    // Configure POM metadata
    pom {
        name.set(ARTIFACT_ID)
        description.set(DESC)
        url.set("https://github.com/${GITHUB_REPO}")
        licenses {
            license {
                name.set(LICENSE)
                url.set(LICENSE_URL)
            }
        }
        developers {
            developer {
                id.set(DEVELOPER_ID)
                name.set(DEVELOPER_NAME)
                email.set(DEVELOPER_EMAIL)
                organization.set(DEVELOPER_ORGANIZATION)
                organizationUrl.set(DEVELOPER_ORGANIZATION_URL)
            }
        }
        scm {
            url.set("https://github.com/${GITHUB_REPO}")
            connection.set("scm:git:https://github.com/${GITHUB_REPO}")
            developerConnection.set("scm:git:https://github.com/${GITHUB_REPO}")
        }
        issueManagement {
            system.set("GitHub")
            url.set("https://github.com/${GITHUB_REPO}/issues")
        }
    }
}


test {
    useJUnitPlatform()
}