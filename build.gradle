plugins {
//    id 'java'
    id 'java-library'       // 基础 Java
    id 'maven-publish'
    id 'org.jreleaser' version '1.19.0'
}

group = 'io.github.tcq1007'
version = '1.0.2'

ext {
    COMPONENT_TYPE = "java"
    GROUP = "io.github.tcq1007"
    ARTIFACT_ID = "valid-error-code-processor"
    VERSION = "1.0.0"
    PUBLISHING_TYPE = "USER_MANAGED"
    DESC = "A Java library for validating and processing error codes."
    LICENSE = "Apache-2.0"
    LICENSE_URL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
    GITHUB_REPO = "tcq1007/valid-error-code-processor"
    DEVELOPER_ID = "tcq1007"
    DEVELOPER_NAME = "tcq1007"
    DEVELOPER_ORGANIZATION = "io.github.tcq1007"
    DEVELOPER_ORGANIZATION_URL = "https://github.com/tcq1007"
    DEVELOPER_EMAIL = "1007281088@qq.com"
}

// 适用于所有 Java 编译任务
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

javadoc {
    // 关闭所有检查
    options.addStringOption('Xdoclint:none', '-quiet')
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java

            pom {
                name = 'app'
                description = "${DESC}"
                url = 'https://github.com/tcq1007'
                inceptionYear = '2025'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'tcq1007'
                        name = 'tcq1007'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/TCQ1007/valid-errorcode-processor.git'
                    developerConnection = 'scm:git:ssh://github.com/TCQ1007/valid-errorcode-processor.git'
                    url = 'https://github.com/TCQ1007/valid-errorcode-processor'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // 若使用 auto-service 生成服务配置（可选）
    implementation 'com.google.auto.service:auto-service:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = "./tcq1007_0x6E2301CC_public.asc"
        secretKey  = "./tcq1007_0x6E2301CC_SECRET.asc"
    }
    deploy {
        maven {
            mavenCentral {

                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')

                    // Activates publication of snapshot artifacts.
                    // Defaults to `false`.
                    //
                    snapshotSupported = false

                    // The username required for authorization.
                    //
                    username = findProperty('sonatypeUsername')

                    // Password for login into the MAVENCENTRAL service.
                    //
                    password = findProperty('sonatypePassword')

                    // The authorization method to use.
                    // Supported values are [`NONE`, `BASIC`, `BEARER`].
                    // `Basic` requires both username & password.
                    // `BEARER` requires a token (set as password).
                    // Defaults to `BEARER`.
                    //
                    authorization = 'BASIC'

                    // Signs artifacts with the configured credentials.
                    // The Signing section must be configured as well.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    sign = true

                    // Checksums all artifacts with `MD5`, `SHA-1`, `SHA-256`, and `SHA-512`.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    checksums = true

                    // Verifies that a matching `-sources.jar` artifact is staged.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    sourceJar = true

                    // Verifies that a matching `-javadoc.jar` artifact is staged.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    javadocJar = true

                    // Verifies that POM files comply with the minimum requirements for publication
                    // to Maven Central. Checks rules using PomChecker.
                    // Defaults to `false` unless `applyMavenCentralRules` is set to `true`.
                    //
                    verifyPom = true

                    // Verifies pom files, signs all artifacts, verifies that matching `-sources.jar` and
                    // `-javadoc.jar` artifacts are also staged.
                    // Defaults to `false`.
                    //
                    applyMavenCentralRules = true
                }
            }
        }
    }
}


test {
    useJUnitPlatform()
}
